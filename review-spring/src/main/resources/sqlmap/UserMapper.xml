<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">
    <!--
        开启二级缓存，仅对当前SQL映射文件下的所有查询语句生效
        select标签属性useCache="false"取消使用缓存
    -->
    <cache flushInterval="60000" size="512" readOnly="true"/>

    <select id="count" resultType="int">
        SELECT COUNT(*) FROM smbms_user
    </select>

    <select id="findAll" resultType="com.smbms.pojo.User">
        SELECT * FROM smbms_user
    </select>

    <!-- 1. 传一个简单类型 : 通过 #{参数名}-->
    <select id="findList1" resultType="User">
        SELECT * FROM smbms_user WHERE userName LIKE CONCAT('%',#{userName},'%')
    </select>

    <!-- 2. 传多个简单类型 - 下标 : 通过 #{参数下标}-->
    <select id="findList2" resultType="User">
        SELECT * FROM smbms_user WHERE userName LIKE CONCAT('%', #{param1}, '%') AND phone = #{param2}
    </select>

    <!-- 2. 传多个简单类型 - 注解 : 通过 #{注解参数名}-->
    <select id="findList3" resultType="User">
        SELECT * FROM smbms_user WHERE userName LIKE CONCAT('%',#{userName},'%') AND phone = #{phone}
    </select>

    <!-- 3. 传一个复杂类型 - Map : 通过 #{key}-->
    <select id="findList4" resultType="User">
        SELECT * FROM smbms_user WHERE userName LIKE CONCAT('%', #{name}, '%') AND phone = #{phone}
    </select>

    <!-- 3. 传一个复杂类型 - JavaBean : 通过 #{fieldName}-->
    <select id="findList5" resultType="User">
        SELECT * FROM smbms_user WHERE userName LIKE CONCAT('%', #{userName}, '%') AND phone = #{phone}
    </select>

    <!-- com.demomybatis.Demo5.1 CRUD - create, id=addUser-->
    <insert id="addUser">
        INSERT INTO smbms_user(userName, userCode, userPassword) VALUES(#{userName}, #{userCode}, #{userPassword})
    </insert>

    <!-- com.demomybatis.Demo5.2 CRUD - delete, id=delUser-->
    <delete id="delUser">
        DELETE FROM smbms_user WHERE id=#{id}
    </delete>
    <!-- com.demomybatis.Demo5.3 CRUD - update, id=updUser-->
    <update id="updUser">
        UPDATE smbms_user SET userName=#{userName}, userCode=#{userCode}, userPassword=#{userPassword} WHERE id=#{id}
    </update>

    <!--com.demomybatis.Demo5.4 自定义结果映射, resultMap-->
    <select id="findAllResultMap" resultMap="userMap">
        SELECT u.*, r.roleName FROM smbms_user u LEFT JOIN smbms_role r ON u.userRole = r.id
    </select>

    <!--com.demomybatis.Demo5.4 resultMap - userMap-->
    <resultMap id="userMap" type="User">
        <!-- db中roleName字段, 映射为User中的userRoleName字段 -->
        <result column="roleName" property="userRoleName"/>
    </resultMap>

    <!--com.demomybatis.Demo6.1 association 一对一, 查询所有用户对应的角色信息-->
    <select id="findAllUserForRoleInfo" resultMap="userAndRoleMap">
        SELECT *,
               r.id rId,
               r.createBy rCreateBy,
               r.creationDate rCreationDate,
               r.modifyBy rModifyBy,
               r.modifyDate rModifyDate
        FROM smbms_user u LEFT JOIN smbms_role r ON u.userRole = r.id
    </select>

    <!-- com.demomybatis.Demo6.1 association子元素, 定义一对一关系, 自动映射会被取消, 映射级别需要提升到FULL才能继续自动映射-->
    <resultMap id="RoleMap" type="Role">
        <!-- 子元素id: 通常为主键id, 定义该子元素可以查询提高性能 -->
        <id column="rId" property="id"/>
        <!-- 将查询结果 rFieldName字段 映射到Role类中的property属性-->
        <result column="rCreateBy" property="createBy"/>
        <result column="rCreationDate" property="creationDate"/>
        <result column="rModifyBy" property="modifyBy"/>
        <result column="rModifyDate" property="modifyDate"/>
    </resultMap>
    <resultMap id="userAndRoleMap" type="User">
        <id column="id" property="id"/>
        <!-- association映射数据到一个对象上-->
        <association property="role" resultMap="RoleMap"/>
    </resultMap>

    <!-- com.demomybatis.Demo7 collection 子元素定义 一对多关系 -->
    <select id="findAllUserForAddresses">
        SELECT *,
               a.id aId,
               a.createBy aCreateBy,
               a.creationDate aCreationDate,
               a.modifyBy aModifyBy,
               a.modifyDate aModifyDate
        FROM smbms_user u LEFT JOIN smbms_address a ON u.id = a.userId
    </select>
    <!--
        com.demomybatis.Demo7 collection 定义一对多关系时, 自动映射会被取消, 映射级别需要提升到FULL才能继续自动映射
              查询结果会被Mybatis折叠, 与SQL语句查询到的结果数量不一致
    -->
    <resultMap id="userAndAddressMap" type="User">
        <id column="id" property="id"/>
        <!-- collection 子元素 映射数据到集合(List, Set)  -->
        <collection property="addressList" resultMap="addressMap"/>
    </resultMap>
    <!-- Address 映射结果-->
    <resultMap id="addressMap" type="Address">
        <id column="aId" property="id" />
        <result column="aCreateBy" property="createBy"/>
        <result column="aCreationDate" property="creationDate"/>
        <result column="aModifyBy" property="modifyBy"/>
        <result column="aModifyDate" property="modifyDate"/>
    </resultMap>


    <!-- Demo9.1 Mybatis 动态SQL - if-->
    <!-- Notice test="condition"-->
    <select id="list1" resultType="User">
        SELECT  * FROM smbms_user WHERE 1=1
        <if test="userName != null and userName != ''">
            AND userName LIKE CONCAT('%',#{userName}, '%')
        </if>
        <if test="userRole != null and userRole != 0">
            AND userRole = #{userRole}
        </if>
    </select>
    <!-- Demo9.2 Mybatis 动态SQL - where-->
    <select id="list2" resultType="User">
        SELECT  * FROM smbms_user
        <where>
            <if test="userName != null and userName != ''">
                AND userName LIKE CONCAT('%',#{userName}, '%')
            </if>
            <if test="userRole != null and userRole != 0">
                AND userRole = #{userRole}
            </if>
        </where>
    </select>
</mapper>